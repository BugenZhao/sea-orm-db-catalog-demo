//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "my_view")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub object_id: i32,
    pub definition: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::my_object::Entity",
        from = "Column::ObjectId",
        to = "super::my_object::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    MyObject,
    #[sea_orm(has_many = "super::my_view_dependency::Entity")]
    MyViewDependency,
}

impl Related<super::my_view_dependency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MyViewDependency.def()
    }
}

impl Related<super::my_object::Entity> for Entity {
    fn to() -> RelationDef {
        super::my_view_dependency::Relation::MyObject.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::my_view_dependency::Relation::MyView.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
