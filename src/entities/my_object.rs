//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "my_object")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub r#type: String,
    pub name: String,
    pub database_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::my_table::Entity")]
    MyTable,
    #[sea_orm(has_many = "super::my_view::Entity")]
    MyView,
    #[sea_orm(has_many = "super::my_view_dependency::Entity")]
    MyViewDependency,
}

impl Related<super::my_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MyTable.def()
    }
}

impl Related<super::my_view_dependency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MyViewDependency.def()
    }
}

impl Related<super::my_view::Entity> for Entity {
    fn to() -> RelationDef {
        super::my_view_dependency::Relation::MyView.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::my_view_dependency::Relation::MyObject.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
